#=================================================
# https://github.com/wukongdaily/RunFilesBuilder
# Description: Build RunFiles using GitHub Actions
# Lisence: MIT
# Author: wukongdaily
# Blog: wkdaily.cpolar.top
#=================================================
name: Make PassWall2 run files

on:
  workflow_dispatch:
    inputs:
      package_version:
        description: '这里是包版本'
        required: false
        default: 'packages-24.10'

jobs:
  build:
    runs-on: ubuntu-22.04 

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Clone makeself repo
        run: |
          git clone https://github.com/megastep/makeself.git

      - name: Create directories for x86_64 and set PACKAGE_VERSION
        run: |
          mkdir -p x86_64/depends
          package_version="${{ github.event.inputs.package_version }}"
          if [ -z "$package_version" ]; then
            package_version="packages-24.10"
          fi
          echo "PACKAGE_VERSION=$package_version" >> $GITHUB_ENV
         
      - name: Download latest ipk files for x86_64
        uses: robinraju/release-downloader@v1.12
        with:
      # 下载源
          repository: 'xiaorouji/openwrt-passwall2'
          latest: true
      # 下载所有资源文件
          fileName: '*'
          out-file-path: 'source/'

      - name: Unzip file
        run: |
          unzip source/passwall_packages_ipk_x86_64.zip -d x86_64/depends/

      # - name: Download ipk files for x86_64
        # run: |
          # echo "Get PACKAGE_VERSION=$PACKAGE_VERSION"
          
          # FILE_PREFIXES=("luci-app-passwall2" "geoview" "hysteria" "naiveproxy" "shadowsocks-rust-sslocal" "shadowsocks-rust-ssserver" "shadowsocksr-libev-ssr-local" "shadowsocksr-libev-ssr-redir" "shadowsocksr-libev-ssr-server" "simple-obfs" "sing-box" "tcping" "tuic-client" "v2ray-geoip" "v2ray-geosite" "v2ray-plugin" "xray-core")
          # EXCLUDE_PREFIXES=("luci-app-naiveproxy" "simple-obfs-client" "simple-obfs-server")
          
          # BASE_URL_X86="https://dl.openwrt.ai/$PACKAGE_VERSION/x86_64/kiddin9/"
          # echo "Fetching x86 directory page from $BASE_URL_X86"
          # wget -qO- "$BASE_URL_X86" | \
          # while IFS= read -r LINE; do
              # for PREFIX in "${FILE_PREFIXES[@]}"; do
                  # if [[ "$LINE" == *"$PREFIX"* ]]; then
                      # FILE=$(echo "$LINE" | grep -oP 'href="\K[^"]*')
                      # if [[ -z "$FILE" ]]; then
                          # echo "No file found in line, skipping"
                          # continue
                      # fi
                      # exclude_file=false
                      # for exclude_prefix in "${EXCLUDE_PREFIXES[@]}"; do
                          # if [[ "$FILE" == $exclude_prefix* ]]; then
                              # exclude_file=true
                              # break
                          # fi
                      # done
                      # if $exclude_file; then
                          # echo "Skip file: $FILE"
                          # continue
                      # fi
                      # FILE_URL="${BASE_URL_X86}${FILE}"
                      # echo "Found file: $FILE_URL"
                      # curl -L --fail "$FILE_URL" -o "x86_64/depends/$(basename $FILE_URL)" -#
                    # fi
              # done
          # done
        
      - name: mv pw2 to main dir
        run: |
          pw2_ver=`ls |grep *_luci-app|awk -F'[_]' '{print $2}'`
          pw2zh_ver=`ls |grep *_luci-i18n|awk -F'[_-]' '{print $7"-"$8}'`
          mv source/*_luci-app-passwall2*.ipk x86_64/luci-app-passwall2_"$pw2_ver"_all.ipk
          mv source/*_luci-i18n-passwall2-zh-cn*_all.ipk x86_64/luci-i18n-passwall2-zh-cn_"$pw2zh_ver"_all.ipk
          echo "List main dir ipk files for x86"
          ls x86_64
      
      # - name: downloads libopenssl3 & libudns ipk
        # run: |
          # echo "downloading libopenssl3 ipk"
         # FILE_PREFIXES=("libopenssl3" "libudns")
          # BASE_URL_X86="https://dl.openwrt.ai/$PACKAGE_VERSION/x86_64/base/"
          # wget -qO- "$BASE_URL_X86" | \
          # while IFS= read -r LINE; do
            # for PREFIX in "${FILE_PREFIXES[@]}"; do
                # if [[ "$LINE" == *"$PREFIX"* ]]; then
                    # FILE=$(echo "$LINE" | grep -oP 'href="\K[^"]*')
                    # if [[ -z "$FILE" ]]; then
                        # # echo "No file found in line, skipping"
                        # continue
                    # fi
                    # FILE_URL="${BASE_URL_X86}${FILE}"
                    # echo "Found file: $FILE_URL"
                    # curl -L --fail "$FILE_URL" -o "x86_64/depends/$(basename $FILE_URL)" -#
                  # fi
            # done
          # done
          # echo "downloading libudns ipk"
          # BASE_URL_X86="https://dl.openwrt.ai/$PACKAGE_VERSION/x86_64/packages/"
          # wget -qO- "$BASE_URL_X86" | \
          # while IFS= read -r LINE; do
            # for PREFIX in "${FILE_PREFIXES[@]}"; do
                # if [[ "$LINE" == *"$PREFIX"* ]]; then
                    # FILE=$(echo "$LINE" | grep -oP 'href="\K[^"]*')
                    # if [[ -z "$FILE" ]]; then
                        # # echo "No file found in line, skipping"
                        # continue
                    # fi
                    # FILE_URL="${BASE_URL_X86}${FILE}"
                      # echo "Found file: $FILE_URL"
                      # curl -L --fail "$FILE_URL" -o "x86_64/depends/$(basename $FILE_URL)" -#
                # fi
            # done
          # done          

      - name: List depends ipks
        run: |
          echo "List x86 depends ipk files"
          ls -lh x86_64/depends/          
      
      - name: Create install.sh 
        run: |
            # echo -e "#!/bin/sh\n\nopkg update\nif [ \$? -ne 0 ]; then\n    echo \"update failed\"\n    exit 1\nfi\nopkg install depends/*.ipk --force-depends\nopkg install *.ipk --force-depends" > x86_64/install.sh
            cp installscript/passwall2/install.sh x86_64/install.sh
            chmod +x x86_64/install.sh
  
      - name: Create self-extracting archives
        run: |
          mv -f x86_64 makeself
          cd makeself
          ipk_file=$(ls x86_64/*_luci-app-passwall2*.ipk)
          appversion=$(basename "$ipk_file" | grep -oP '\d+\.\d+\.\d+')
          echo "APP_VERSION=$appversion" >> $GITHUB_ENV
          release_name=$(TZ="Asia/Shanghai" date +'%Y-%m-%d %H:%M Build')
          echo "RELEASE_NAME=$release_name" >> $GITHUB_ENV
          ./makeself.sh x86_64/ passwall2_x86_64_$appversion.run "by github action" ./install.sh           
      
      - name: Upload all .run files to GitHub Release
        uses: softprops/action-gh-release@v2.1.0
        with:
          tag_name: ${{ env.APP_VERSION }}
          name: "PassWall2-${{ env.APP_VERSION }}"
          body: "![Github](https://img.shields.io/badge/passwall2.run-123456?logo=github&logoColor=fff&labelColor=AB5ED8&style=for-the-badge) [![Github](https://img.shields.io/badge/国内加速站下载-FC7C0D?logo=github&logoColor=fff&labelColor=000&style=for-the-badge)](https://wkdaily.cpolar.top/archives/1) ![GitHub Downloads (all assets, specific tag)](https://img.shields.io/github/downloads/wukongdaily/RunFilesBuilder/${{ env.APP_VERSION }}/total?style=for-the-badge&labelColor=black&color=%2325c2a0)"
          files: makeself/*.run
          token: ${{ secrets.GITHUB_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

   
